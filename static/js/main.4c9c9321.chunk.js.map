{"version":3,"sources":["Components/InfoCard.js","Components/Game.js","App.js","serviceWorker.js","index.js"],"names":["InfoCard","class","target","href","styles","root","display","textAllign","cube","border","minHeight","minWidth","maxHeight","maxWidth","rules","interval","selectedIn","Set","Game","useState","rowV","i","colV","j","push","gridState","setGridState","startStopBtnLabel","setStartStopBtnLabel","incNeighbours","neighbours","onClick","setInterval","tempSelectedIn","delSet","selectedBoxIndex","split","x","parseInt","y","map","incNeighbour","u","v","neighbourIndX","neighbourIndY","count","a","b","nbrNeighbourIndX","nbrNeighbourIndY","has","add","del","delInd","delete","prevState","ad","addInd","clearInterval","clear","style","gridCol","gridRow","key","backgroundColor","curr","currIn","createGrid","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c9c9321.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst InfoCard = () => {\r\n  return (\r\n    <div class=\"container\">\r\n      <h3>\r\n        <b>Conway's Game of Life</b>\r\n      </h3>\r\n      <h4>Rules</h4>\r\n      <ol>\r\n        <li>\r\n          Any live cell with fewer than two live neighbours dies, as if by\r\n          underpopulation.\r\n        </li>\r\n        <br />\r\n        <li>\r\n          Any live cell with fewer than two live neighbours dies, as if by\r\n          underpopulation.\r\n        </li>\r\n        <br />\r\n        <li>\r\n          Any live cell with fewer than two live neighbours dies, as if by\r\n          underpopulation.\r\n        </li>\r\n        <br />\r\n        <li>\r\n          Any live cell with fewer than two live neighbours dies, as if by\r\n          underpopulation.\r\n        </li>\r\n      </ol>\r\n      <br />\r\n      <p>(Select some cells and press start)</p>\r\n      <span>More at: </span>\r\n      <a\r\n        target=\"_blank\"\r\n        href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\r\n      >\r\n        wiki\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InfoCard;\r\n","/* eslint-disable array-callback-return */\r\nimport React, { useState } from \"react\";\r\n\r\nimport InfoCard from \"./InfoCard\";\r\n\r\nconst styles = {\r\n  root: { display: \"flex\", textAllign: \"center\" },\r\n  cube: {\r\n    border: \"solid 1px\",\r\n    minHeight: 40,\r\n    minWidth: 40,\r\n    maxHeight: 40,\r\n    maxWidth: 40,\r\n  },\r\n  rules: {},\r\n};\r\n\r\nconst rows = 12;\r\nconst cols = 18;\r\nlet interval = \"\";\r\nconst selectedIn = new Set();\r\n\r\nconst Game = () => {\r\n  /* State************/\r\n  const [gridState, setGridState] = useState(() => {\r\n    const rowV = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      const colV = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        colV.push(0);\r\n      }\r\n      rowV.push(colV);\r\n    }\r\n    return rowV;\r\n  });\r\n  const [startStopBtnLabel, setStartStopBtnLabel] = useState(\"Start\");\r\n  /* ****************/\r\n\r\n  /* Actions*********/\r\n  const createGrid = () => {\r\n    let gridCol = [];\r\n    for (let j = 0; j < cols; j++) {\r\n      let gridRow = [];\r\n      for (let i = 0; i < rows; i++) {\r\n        gridRow.push(\r\n          <div\r\n            key={i + \",\" + j}\r\n            style={{\r\n              backgroundColor: gridState[i][j] ? \"blue\" : \"white\",\r\n              ...styles.cube,\r\n            }}\r\n            onClick={() => {\r\n              const curr = gridState[i][j];\r\n              const currIn = i + \",\" + j;\r\n              if (!curr) {\r\n                selectedIn.add(currIn);\r\n              } else {\r\n                if (selectedIn.has(currIn)) {\r\n                  selectedIn.delete(currIn);\r\n                }\r\n              }\r\n              setGridState((prevState) => {\r\n                prevState[i][j] = curr ? 0 : 1;\r\n                return [...prevState];\r\n              });\r\n            }}\r\n          ></div>\r\n        );\r\n      }\r\n      gridCol.push(<div key={j}>{gridRow}</div>);\r\n    }\r\n    return gridCol;\r\n  };\r\n\r\n  const resetGrid = () => {\r\n    setStartStopBtnLabel(\"Start\");\r\n    clearInterval(interval);\r\n    selectedIn.clear();\r\n    setGridState(() => {\r\n      const rowV = [];\r\n      for (let i = 0; i < rows; i++) {\r\n        const colV = [];\r\n        for (let j = 0; j < cols; j++) {\r\n          colV.push(0);\r\n        }\r\n        rowV.push(colV);\r\n      }\r\n      return rowV;\r\n    });\r\n  };\r\n\r\n  // include the cell itself\r\n  const incNeighbours = [\r\n    [0, 0],\r\n    [0, 1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [1, -1],\r\n    [-1, 1],\r\n    [-1, -1],\r\n    [0, -1],\r\n    [-1, 0],\r\n  ];\r\n\r\n  // only neighours\r\n  const neighbours = [\r\n    [0, 1],\r\n    [1, 0],\r\n    [1, 1],\r\n    [1, -1],\r\n    [-1, 1],\r\n    [-1, -1],\r\n    [0, -1],\r\n    [-1, 0],\r\n  ];\r\n\r\n  const startSimulation = () => {\r\n    setStartStopBtnLabel(\"Running\");\r\n    interval = setInterval(() => {\r\n      const tempSelectedIn = new Set();\r\n      const delSet = new Set();\r\n      for (let selectedbox of selectedIn) {\r\n        const selectedBoxIndex = selectedbox.split(\",\");\r\n        const x = parseInt(selectedBoxIndex[0]);\r\n        const y = parseInt(selectedBoxIndex[1]);\r\n\r\n        incNeighbours.map((incNeighbour) => {\r\n          const u = incNeighbour[0];\r\n          const v = incNeighbour[1];\r\n\r\n          const neighbourIndX = x + u;\r\n          const neighbourIndY = y + v;\r\n\r\n          let count = 0;\r\n\r\n          neighbours.map((neighbours) => {\r\n            const a = neighbours[0];\r\n            const b = neighbours[1];\r\n\r\n            const nbrNeighbourIndX = neighbourIndX + a;\r\n            const nbrNeighbourIndY = neighbourIndY + b;\r\n            if (selectedIn.has(nbrNeighbourIndX + \",\" + nbrNeighbourIndY)) {\r\n              count++;\r\n            }\r\n          });\r\n\r\n          if (count < 2) {\r\n            if (selectedIn.has(neighbourIndX + \",\" + neighbourIndY)) {\r\n              delSet.add(neighbourIndX + \",\" + neighbourIndY);\r\n            }\r\n          } else if (count > 3) {\r\n            if (selectedIn.has(neighbourIndX + \",\" + neighbourIndY)) {\r\n              delSet.add(neighbourIndX + \",\" + neighbourIndY);\r\n            }\r\n          } else if (count === 3) {\r\n            tempSelectedIn.add(neighbourIndX + \",\" + neighbourIndY);\r\n          }\r\n        });\r\n      }\r\n\r\n      // delete unwanted\r\n      for (const del of delSet) {\r\n        const delInd = del.split(\",\");\r\n        const i = delInd[0];\r\n        const j = delInd[1];\r\n        if (i >= 0 && j >= 0 && i < rows && j < cols) {\r\n          selectedIn.delete(del);\r\n          setGridState((prevState) => {\r\n            prevState[i][j] = 0;\r\n            return [...prevState];\r\n          });\r\n        }\r\n      }\r\n\r\n      // add required\r\n      for (const ad of tempSelectedIn) {\r\n        const addInd = ad.split(\",\");\r\n        const i = addInd[0];\r\n        const j = addInd[1];\r\n\r\n        if (i >= 0 && j >= 0 && i < rows && j < cols) {\r\n          selectedIn.add(ad);\r\n          setGridState((prevState) => {\r\n            prevState[i][j] = 1;\r\n            return [...prevState];\r\n          });\r\n        }\r\n      }\r\n    }, 500);\r\n  };\r\n\r\n  /* ****************/\r\n\r\n  return (\r\n    <>\r\n      <button onClick={startSimulation}>{startStopBtnLabel}</button>\r\n      <button onClick={resetGrid}>Reset</button>\r\n      <div style={styles.root}>\r\n        {createGrid()}\r\n        <div style={styles.rules} class=\"card\">\r\n          <InfoCard />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport \"./App.css\";\n\n// components\nimport Game from \"./Components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}